        /* Get Sample from PPG sampling queue */
        if (0)
        // if (k_msgq_get(&q_ppg_sample, &ppg_sensor_sample, K_NO_WAIT) == 0)
        {
            if (settings_send_usb_enabled)
            {
                ppg_buff_for_pkt(ppg_sensor_sample.ppg_red_sample);
            }

            // #ifdef CONFIG_BT
            if (settings_send_ble_enabled)
            {
                
            }
            // #endif

#ifdef CONFIG_HEALTHYPI_DISPLAY_ENABLED
            if (settings_plot_enabled)
            {
                if (hpi_disp_get_op_mode() == OP_MODE_DISPLAY)
                {
                    if (hpi_disp_get_curr_screen() == SCR_PPG)
                    {
                        k_msgq_put(&q_plot_ppg, &ppg_sensor_sample, K_NO_WAIT);
                    }
                }
            }
#endif

            if (settings_log_data_enabled && sd_card_present)
            {
                record_session_add_ppg_point(ppg_sensor_sample.ppg_ir_sample);
            }

            // Buffer the PPG data for SPO2 calculation
            if (spo2_time_count < FreqS)
            {
                irBuffer[BUFFER_SIZE - FreqS + spo2_time_count] = ppg_sensor_sample.ppg_ir_sample;
                redBuffer[BUFFER_SIZE - FreqS + spo2_time_count] = ppg_sensor_sample.ppg_red_sample;

                spo2_time_count++;
            }
            else
            // Buffer is full, calculate SPO2
            {
                spo2_time_count = 0;
                maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &m_spo2, &validSPO2, &m_hr, &validHeartRate);
                // LOG_DBG("SPO2: %d, Valid: %d, HR: %d, Valid: %d\n", m_spo2, validSPO2, m_hr, validHeartRate);
                if (validSPO2)
                {
#ifdef CONFIG_HEALTHYPI_DISPLAY_ENABLED
                    // hpi_scr_update_spo2(m_spo2);
#endif
                    if (settings_send_ble_enabled)
                    {
                        // ble_spo2_notify(m_spo2);
                    }

                    if (settings_send_usb_enabled)
                    {
                        spo2_serial = m_spo2;
                    }

                    struct hpi_spo2_t spo2_chan_value = {
                        .spo2 = m_spo2};
                    zbus_chan_pub(&spo2_chan, &spo2_chan_value, K_SECONDS(1));
                }

                if (validHeartRate)
                {
#ifdef CONFIG_HEALTHYPI_DISPLAY_ENABLED
                    // if (settings_send_display_enabled)
                    // hpi_scr_update_pr(m_hr);
#endif
                }

                for (int i = FreqS; i < BUFFER_SIZE; i++)
                {
                    redBuffer[i - FreqS] = redBuffer[i];
                    irBuffer[i - FreqS] = irBuffer[i];
                }
            }
        }



        // Get Sample from ECG / BioZ sampling queue
        // if (k_msgq_get(&q_ecg_bioz_sample, &ecg_bioz_sensor_sample, K_NO_WAIT) == 0)
        if (0)
        {
            int16_t resp_i16_buf[4];
            int16_t resp_i16_filt_out[4];

            for (int i = 0; i < ecg_bioz_sensor_sample.bioz_num_samples; i++)
            {
                resp_i16_buf[i] = (int16_t)(ecg_bioz_sensor_sample.bioz_samples[i] >> 4);
            }

            resp_process_sample(resp_i16_buf, resp_i16_filt_out);
            resp_algo_process(resp_i16_filt_out, &m_resp_rate);

            /*if (settings_log_data_enabled && sd_card_present)
            {
                record_session_add_ecg_point(ecg_bioz_sensor_sample.ecg_samples, ecg_bioz_sensor_sample.ecg_num_samples, ecg_bioz_sensor_sample.bioz_samples, ecg_bioz_sensor_sample.bioz_num_samples);
            }*/
           
#ifdef CONFIG_HEALTHYPI_DISPLAY_ENABLED
/*
            if (hpi_disp_get_op_mode() == OP_MODE_DISPLAY)
            {
                k_msgq_put(&q_plot_ecg_bioz, &ecg_bioz_sensor_sample, K_NO_WAIT);
            }
*/
#endif
            //hpi_scr_update_rr(globalRespirationRate);
            // hpi_scr_update_hr(ecg_bioz_sensor_sample.hr);

            struct hpi_resp_rate_t resp_rate_chan_value = {
                .resp_rate = m_resp_rate};
            zbus_chan_pub(&resp_rate_chan, &resp_rate_chan_value, K_SECONDS(1));

            struct hpi_hr_t hr_chan_value = {
                .hr = ecg_bioz_sensor_sample.hr};
            zbus_chan_pub(&hr_chan, &hr_chan_value, K_SECONDS(1));
        }